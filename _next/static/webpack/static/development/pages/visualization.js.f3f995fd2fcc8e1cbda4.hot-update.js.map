{"version":3,"file":"static/webpack/static/development/pages/visualization.js.f3f995fd2fcc8e1cbda4.hot-update.js","sources":["webpack:///./src/components/ui/Chart.tsx"],"sourcesContent":["import React from 'react';\nimport Papa from 'papaparse';\nimport fetch from 'node-fetch';\nimport moment from 'moment';\n\nimport { merge, random, range } from \"lodash\";\nimport { \n\tVictoryPie, \n\tVictoryChart, \n\tVictoryLine, \n\tVictoryTheme, \n\tVictoryScatter,\n\tVictoryStack,\n\tVictoryGroup,\n\tVictoryArea,\n\tVictoryPortal,\n\tVictoryLabel,\n\tVictoryAxis,\n\tVictoryLegend\n} from \"victory\";\n\nimport ChartTheme from \"./ChartTheme\";\n\n\nconst csvURL = 'https://raw.githubusercontent.com/nychealth/coronavirus-data/master/case-hosp-death.csv?cache-control=';\n\nconst colorDark:string = '#455A64';\nconst colorMed:string = '#90A4AE';\nconst colorLight:string = '#bdc6cb';\n\nexport interface IChart extends React.Component<IProps> {\n    checkKey(obj:any, key:string):boolean;\n    fetchCsv():object;\n    resolveCsvData(result:any):void;\n    getCsvData():void;\n    updateKey(obj:any, oldkey:string, newkey:string):object;\n}\n\ntype IProps = {\n};\n\ntype IState = {\n\tdata: Array<object>\n};\n\ntype LabelProps = {\n\tx:string;\n\ty:string;\n}\n\ntype CSVProps = {\n\tDATE_OF_INTEREST:string;\n\tNEW_COVID_CASE_COUNT:string;\n\tHOSPITALIZED_CASE_COUNT:string;\n\tDEATH_COUNT:string;\n}\n\nclass Chart extends React.Component<IProps, IState> implements IChart{\n\n\tconstructor(props:IProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tdata: []\n\t\t};\n\n\t\tthis.resolveCsvData = this.resolveCsvData.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getCsvData();\n\t}\n\n\tfetchCsv() {\n\t\treturn fetch('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/case-hosp-death.csv?cache-control=' + (new Date()).getTime())\n\t\t.then(function (response:any) {\n\t\t\ttry {\n\t\t\t\tlet reader = response.body.getReader();\n\t\t\t\tlet decoder = new TextDecoder('utf-8');\n\n\t\t\t\treturn reader.read().then(function (result:any) {\n\t\t\t\t\treturn decoder.decode(result.value);\n\t\t\t\t}).catch((e:any) => {\n\t\t\t\t\tthrow new Error('fetchCsv() read() error' + e);\n\t\t\t\t})\n\t\t\t} catch(e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).catch((e:any) => {\n\t\t\tthrow new Error('fetchCsv() fetch() error' + e);\n\t\t})\n\t}\n\n\tresolveCsvData(result:any) {\n\t\tresult.data.splice(-2, 2);\n\n\t\tthis.setState({\n\t\t\tdata: this.checkCSVData(result.data)\n\t\t});\n\t}\n\n\tcheckKey(obj:any, key:string) {\n\t\treturn key in obj;\n\t}\n\n\tupdateKey(obj:any, oldkey:string, newkey:string) {\n\t\tobj[newkey] = obj[oldkey];\n\t\tdelete obj[oldkey];\n\t\treturn obj;\n\t}\n\n\tcheckCSVData(data:Array<CSVProps>) {\n\t\t// FIX for https://github.com/nychealth/coronavirus-data/issues/41\n\t\tconst badkey = 'Retrieving data. Wait a few seconds and try to cut or copy again.';\n\t\tconst goodkey = 'DATE_OF_INTEREST';\n\n\t\t//TODO Write test validating schema of object props\n\t\tdata.map((obj:CSVProps) => {\n\t\t\tif(this.checkKey(obj, badkey)){\n\t\t\t\tobj = this.updateKey(obj, badkey, goodkey);\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tasync getCsvData() {\n\t\ttry {\n\t\t\tlet csvData = await this.fetchCsv();\n\t\t\tPapa.parse(csvData, {\n\t\t\t\theader: true,\n\t\t\t\tcomplete: this.resolveCsvData,\n\t\t\t\tdynamicTyping: true\n\t\t\t});\n\t\t} catch (e) {\n\t\t\treturn e\n\t\t}\n\t\t//throw new Error('Expected promise to be rejected')\n\t}\n\n\t\n\n\trender() {\n\n\t\treturn (\n\t\t\t<VictoryChart\n\t\t\t\ttheme={VictoryTheme.material}\n\t\t\t\t//domain={{y: [0, 6000]}}\n\t\t\t\tdomainPadding={{y: [0, 50]}}\n\t\t\t\twidth={600}\n\t\t\t\theight={350}\n\t\t\t\tscale={{ x: \"time\" }}\n\t\t\t>   \n\t\t\t\t<VictoryAxis crossAxis\n\t\t\t\t\ttheme={VictoryTheme.material}\n\t\t\t\t\tstandalone={false}\n\t\t\t\t\ttickLabelComponent={\n\t\t\t\t\t\t<VictoryLabel \n\t\t\t\t\t\t\trenderInPortal={true} \n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\t// new Date() for https://momentjs.com/guides/#/warnings/js-date/ [CLEANUP]\n\t\t\t\t\ttickFormat={(t) => moment(new Date(t)).format('M/D/YY')}\n\t\t\t\t\tfixLabelOverlap={true}\n\t\t\t\t/>\n\t\t\t\t<VictoryAxis dependentAxis crossAxis\n\t\t\t\t\ttheme={VictoryTheme.material}\n\t\t\t\t\tstandalone={false}\n\t\t\t\t\ttickLabelComponent={\n\t\t\t\t\t\t<VictoryLabel renderInPortal={true} />\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t <VictoryLegend x={75} y={50}\n\t\t\t\t\ttitle=\"Legend\"\n\t\t\t\t\tcenterTitle\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\tgutter={10}\n\t\t\t\t\tstyle={{ border: { stroke: \"black\" }, title: {fontSize: 10 } }}\n\t\t\t\t\tdata={[\n\t\t\t\t\t\t{ name: \"New Cases\", symbol: { fill: colorDark, type: \"square\" } },\n\t\t\t\t\t\t{ name: \"Hospitalizations\", symbol: { fill: colorMed, type: \"square\" } },\n\t\t\t\t\t\t{ name: \"New Deaths\", symbol: { fill: colorLight, type: \"square\" } }\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<VictoryGroup\n\t\t\t\t\tanimate={{ duration: 1000 }} \n\t\t\t\t\tcolorScale={[colorDark, colorMed, colorLight]}\n\t\t\t\t>\n\t\t\t\t\t<VictoryArea\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tdata: { stroke: colorDark },\n\t\t\t\t\t\t\tparent: { border: \"1px solid #ccc\"}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\t\tx = {(d) => moment(d.DATE_OF_INTEREST, 'MM/DD/YY').toDate().toString()}\n\t\t\t\t\t\ty = \"CASE_COUNT\"\n\t\t\t\t\t/>\n\t\t\t\t\t\n\t\t\t\t\t<VictoryArea\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tdata: { stroke: colorMed },\n\t\t\t\t\t\t\tparent: { border: \"1px solid #ccc\"}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\t\tx = {(d) => moment(d.DATE_OF_INTEREST, 'MM/DD/YY').toDate().toString()}\n\t\t\t\t\t\ty = \"HOSPITALIZED_COUNT\"\n\t\t\t\t\t/>\n\t\t\t\t\t<VictoryArea\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tdata: { stroke: colorLight },\n\t\t\t\t\t\t\tparent: { border: \"1px solid #ccc\"}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\t\tx = {(d) => moment(d.DATE_OF_INTEREST, 'MM/DD/YY').toDate().toString()}\n\t\t\t\t\t\ty = \"DEATH_COUNT\"\n\t\t\t\t\t/>\n\t\t\t\t</VictoryGroup>\n\t\t\t</VictoryChart>\n\t\t);\n\t}\n}\n\nexport default Chart;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AAkBA;AAEA;AACA;AACA;AACA;AA4BA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAIA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;AAIA;AACA;;AADA;AACA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;AAaaA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;AAlKA;AACA;AAoKA;;;;A","sourceRoot":""}